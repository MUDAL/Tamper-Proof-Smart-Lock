<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\smart_lock.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\smart_lock.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Apr 10 18:30:16 2022
<BR><P>
<H3>Maximum Stack Usage =        252 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; HMI &rArr; CheckKey &rArr; InputNewPassword &rArr; RetryPassword &rArr; Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[af]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[47]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[43]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; HMI &rArr; CheckKey &rArr; InputNewPassword &rArr; RetryPassword &rArr; Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[50]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[46]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[48]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[89]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewPassword
</UL>

<P><STRONG><a name="[7a]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendText
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputPhoneNumber
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
</UL>

<P><STRONG><a name="[4a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[c6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendText
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetryPassword
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputPhoneNumber
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>

<P><STRONG><a name="[4c]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ca]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewPassword
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[83]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetryPassword
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewPassword
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
</UL>

<P><STRONG><a name="[cd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[45]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>BT_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bluetooth.o(i.BT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BT_Init &rArr; GPIO_InputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>BT_RxBufferInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bluetooth.o(i.BT_RxBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BT_RxBufferInit &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_Rx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>Button_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, button.o(i.Button_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Button_Init &rArr; GPIO_InputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>CheckKey</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(i.CheckKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CheckKey &rArr; InputNewPassword &rArr; RetryPassword &rArr; Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_DelayMs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDev_Write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateScreen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_GetChar
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_EmptyDatabase
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputPhoneNumber
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewPassword
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
</UL>

<P><STRONG><a name="[9c]"></a>Clock_HSI_8MHz_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, clock.o(i.Clock_HSI_8MHz_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Config
</UL>

<P><STRONG><a name="[7f]"></a>DMA_Rx_CNDTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(i.DMA_Rx_CNDTR))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>

<P><STRONG><a name="[56]"></a>DMA_USART_Rx_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dma.o(i.DMA_USART_Rx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_USART_Rx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_RxBufferInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>

<P><STRONG><a name="[59]"></a>Display</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(i.Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteChar
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateScreen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetryPassword
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputPhoneNumber
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewPassword
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[65]"></a>EEPROM_GetData</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, eeprom.o(i.EEPROM_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EEPROM_GetData &rArr; EEPROM_ReadPage &rArr; I2C_ReadMultiByte &rArr; I2C_Read2Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntruderAlert
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
</UL>

<P><STRONG><a name="[68]"></a>EEPROM_StoreData</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, eeprom.o(i.EEPROM_StoreData))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EEPROM_StoreData &rArr; EEPROM_WritePage &rArr; I2C_WriteMultiByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputPhoneNumber
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewPassword
</UL>

<P><STRONG><a name="[6c]"></a>FindFingerprint</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.FindFingerprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindFingerprint &rArr; Fingerprint_Image2Tz &rArr; GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Image2Tz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_GetImage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_FingerFastSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>Fingerprint_CreateModel</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fingerprint.o(i.Fingerprint_CreateModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Fingerprint_CreateModel &rArr; GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
</UL>

<P><STRONG><a name="[5f]"></a>Fingerprint_EmptyDatabase</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fingerprint.o(i.Fingerprint_EmptyDatabase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Fingerprint_EmptyDatabase &rArr; GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[6f]"></a>Fingerprint_FingerFastSearch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fingerprint.o(i.Fingerprint_FingerFastSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Fingerprint_FingerFastSearch &rArr; GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFingerprint
</UL>

<P><STRONG><a name="[6d]"></a>Fingerprint_GetImage</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fingerprint.o(i.Fingerprint_GetImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Fingerprint_GetImage &rArr; GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFingerprint
</UL>

<P><STRONG><a name="[6e]"></a>Fingerprint_Image2Tz</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fingerprint.o(i.Fingerprint_Image2Tz))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Fingerprint_Image2Tz &rArr; GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFingerprint
</UL>

<P><STRONG><a name="[74]"></a>Fingerprint_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fingerprint.o(i.Fingerprint_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Fingerprint_Init &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_Rx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>Fingerprint_LoadModel</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fingerprint.o(i.Fingerprint_LoadModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Fingerprint_LoadModel &rArr; GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
</UL>

<P><STRONG><a name="[76]"></a>Fingerprint_StoreModel</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fingerprint.o(i.Fingerprint_StoreModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Fingerprint_StoreModel &rArr; GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
</UL>

<P><STRONG><a name="[53]"></a>GPIO_InputInit</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, gpio.o(i.GPIO_InputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_InputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Init
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_InputRead</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.GPIO_InputRead))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDebounced
</UL>

<P><STRONG><a name="[52]"></a>GPIO_OutputInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(i.GPIO_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDev_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Init
</UL>

<P><STRONG><a name="[95]"></a>GPIO_OutputWrite</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.GPIO_OutputWrite))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDev_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDev_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectRow
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_Reset</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Config
</UL>

<P><STRONG><a name="[77]"></a>GSM_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsm.o(i.GSM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GSM_Init &rArr; GPIO_OutputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>GSM_SendText</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, gsm.o(i.GSM_SendText))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GSM_SendText &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteChars
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntruderAlert
</UL>

<P><STRONG><a name="[7c]"></a>GetKeypadData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.GetKeypadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetKeypadData &rArr; Keypad_GetChar &rArr; IsDebounced
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetryPassword
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputPhoneNumber
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewPassword
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
</UL>

<P><STRONG><a name="[a1]"></a>GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, state.o(i.GetState))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>HMI</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, main.o(i.HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = HMI &rArr; CheckKey &rArr; InputNewPassword &rArr; RetryPassword &rArr; Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_DelayMs
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetState
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateScreen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetryPassword
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntruderAlert
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeypadData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>I2C_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Config
</UL>

<P><STRONG><a name="[88]"></a>I2C_Read2Bytes</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, i2c.o(i.I2C_Read2Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Read2Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadMultiByte
</UL>

<P><STRONG><a name="[87]"></a>I2C_ReadByte</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, i2c.o(i.I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadMultiByte
</UL>

<P><STRONG><a name="[67]"></a>I2C_ReadMultiByte</STRONG> (Thumb, 288 bytes, Stack size 28 bytes, i2c.o(i.I2C_ReadMultiByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_ReadMultiByte &rArr; I2C_Read2Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read2Bytes
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadPage
</UL>

<P><STRONG><a name="[93]"></a>I2C_WriteByte</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, i2c.o(i.I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[6a]"></a>I2C_WriteMultiByte</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, i2c.o(i.I2C_WriteMultiByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_WriteMultiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WritePage
</UL>

<P><STRONG><a name="[5c]"></a>InputNewPassword</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, main.o(i.InputNewPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = InputNewPassword &rArr; RetryPassword &rArr; Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_StoreData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetryPassword
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeypadData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[5d]"></a>InputPhoneNumber</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, main.o(i.InputPhoneNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = InputPhoneNumber &rArr; EEPROM_StoreData &rArr; EEPROM_WritePage &rArr; I2C_WriteMultiByte
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_StoreData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeypadData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[86]"></a>IntruderAlert</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(i.IntruderAlert))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IntruderAlert &rArr; EEPROM_GetData &rArr; EEPROM_ReadPage &rArr; I2C_ReadMultiByte &rArr; I2C_Read2Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDev_Write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendText
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
</UL>

<P><STRONG><a name="[5b]"></a>Keypad_GetChar</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, keypad.o(i.Keypad_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keypad_GetChar &rArr; IsDebounced
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectRow
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDebounced
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeypadData
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[8d]"></a>Keypad_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, keypad.o(i.Keypad_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Keypad_Init &rArr; GPIO_InputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>OLED_ClearScreen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled.o(i.OLED_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_ClearScreen
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[92]"></a>OLED_DrawPixel</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, oled.o(i.OLED_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteChar
</UL>

<P><STRONG><a name="[8e]"></a>OLED_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Init &rArr; OLED_UpdateScreen &rArr; OLED_WriteData &rArr; I2C_WriteMultiByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateScreen
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>OLED_SetCursor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled.o(i.OLED_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[62]"></a>OLED_UpdateScreen</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, oled.o(i.OLED_UpdateScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_UpdateScreen &rArr; OLED_WriteData &rArr; I2C_WriteMultiByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[64]"></a>OLED_WriteChar</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, oled.o(i.OLED_WriteChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[94]"></a>OutputDev_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, output_device.o(i.OutputDev_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OutputDev_Init &rArr; GPIO_OutputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>OutputDev_Write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, output_device.o(i.OutputDev_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OutputDev_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntruderAlert
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[84]"></a>RetryPassword</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, main.o(i.RetryPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RetryPassword &rArr; Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeypadData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewPassword
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
</UL>

<P><STRONG><a name="[97]"></a>SD_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sd_card.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_Init &rArr; GPIO_InputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>SPI_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(i.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[85]"></a>SetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, state.o(i.SetState))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
</UL>

<P><STRONG><a name="[5e]"></a>StoreFingerprint</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, main.o(i.StoreFingerprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = StoreFingerprint &rArr; Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_DelayMs
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateScreen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_StoreModel
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_LoadModel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Image2Tz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_GetImage
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_CreateModel
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[6b]"></a>SysTick_DelayMs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.SysTick_DelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_DelayMs
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendText
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDebounced
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WritePage
</UL>

<P><STRONG><a name="[7d]"></a>SysTick_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.SysTick_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>SysTick_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, systick.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Config
</UL>

<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>System_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system.o(i.System_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_Config &rArr; GPIO_OutputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_HSI_8MHz_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>System_DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(i.System_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFingerprint
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[54]"></a>USART_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Init
</UL>

<P><STRONG><a name="[7e]"></a>USART_RxIdleLineDetected</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(i.USART_RxIdleLineDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_RxIdleLineDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStructuredPacket
</UL>

<P><STRONG><a name="[7b]"></a>USART_WriteByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.USART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendText
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
</UL>

<P><STRONG><a name="[a0]"></a>USART_WriteBytes</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(i.USART_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStructuredPacket
</UL>

<P><STRONG><a name="[79]"></a>USART_WriteChars</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(i.USART_WriteChars))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendText
</UL>

<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = main &rArr; HMI &rArr; CheckKey &rArr; InputNewPassword &rArr; RetryPassword &rArr; Display &rArr; OLED_WriteChar &rArr; OLED_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetState
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDev_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDev_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateScreen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearScreen
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_GetChar
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_RxBufferInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntruderAlert
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFingerprint
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[66]"></a>EEPROM_ReadPage</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, eeprom.o(i.EEPROM_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EEPROM_ReadPage &rArr; I2C_ReadMultiByte &rArr; I2C_Read2Bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadMultiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
</UL>

<P><STRONG><a name="[69]"></a>EEPROM_WritePage</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, eeprom.o(i.EEPROM_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EEPROM_WritePage &rArr; I2C_WriteMultiByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteMultiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_StoreData
</UL>

<P><STRONG><a name="[73]"></a>GetStructuredPacket</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, fingerprint.o(i.GetStructuredPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetStructuredPacket &rArr; DMA_USART_Rx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxIdleLineDetected
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_Rx_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Rx_CNDTR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_StoreModel
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_LoadModel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Image2Tz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_GetImage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_FingerFastSearch
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_EmptyDatabase
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_CreateModel
</UL>

<P><STRONG><a name="[71]"></a>PacketInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fingerprint.o(i.PacketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PacketInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_StoreModel
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_LoadModel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Image2Tz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_GetImage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_FingerFastSearch
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_EmptyDatabase
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_CreateModel
</UL>

<P><STRONG><a name="[72]"></a>WriteStructuredPacket</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fingerprint.o(i.WriteStructuredPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteStructuredPacket &rArr; USART_WriteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBytes
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_StoreModel
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_LoadModel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_Image2Tz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_GetImage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_FingerFastSearch
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_EmptyDatabase
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fingerprint_CreateModel
</UL>

<P><STRONG><a name="[8a]"></a>IsDebounced</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, keypad.o(i.IsDebounced))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsDebounced
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_GetChar
</UL>

<P><STRONG><a name="[8c]"></a>SelectRow</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, keypad.o(i.SelectRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SelectRow
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_GetChar
</UL>

<P><STRONG><a name="[90]"></a>OLED_Fill</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oled.o(i.OLED_Fill))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[8f]"></a>OLED_WriteCommand</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled.o(i.OLED_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_WriteCommand &rArr; I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateScreen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[91]"></a>OLED_WriteData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, oled.o(i.OLED_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_WriteData &rArr; I2C_WriteMultiByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteMultiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UpdateScreen
</UL>

<P><STRONG><a name="[99]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9a]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
